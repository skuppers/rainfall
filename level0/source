
// Classic c program main
main(char **av)
{ 
    // SUB esp,0x20   ; Stack meory allocation for variables
    
    
    // MOV   eax, DWORD PTR[ebp+0xc]    ;  $eax is now pointing on **av
    // ADD   eax, 0x4			;  $eax is now av[1]
    // MOV   eax, DWORD PTR[eax]	;  Sizing to DWORD
    // MOV   DWORD PTR [esp], eax	;  Setting stack pointer to eax or av[1] 
    // CALL  0x8049710 <atoi>		;  Call to atoi with av[1] as argument
    
    atoi(envp[1]);
    
    // CMP   eax, 0x1a7			; Comparing atoi's return to 0x1a7 (423)
    
    if (atoi(envp[1]) != 0x1a7)
    { 
    	// MOV   DWORD PTR [esp], 0x80c5348   ; Moving the content of the address 0x80c5348 into $esp.  0x80c5348 contains '/bin/sh'.
	// CALL  0x8050bf0 <strdup>
	// MOV    DWORD PTR [esp+0x10], eax   ; Saving the return of strdup into $esp+0x10
	
        char *pointer = strdup("/bin/sh");
	
        // CALL   <getegid>       ; Getting effective gid & uid
	// CALL   <geteuid>
	// CALL   <setresgid>     ; Setting effective gid & uid
	// CALL   <setresuid>
	
        // LEA   eax, [esp+0x10]                ; Loading the address of $esp+0x10 which is the return of strdup: '/bin/sh'
	// MOV   DWORD PTR [esp+0x4], eax	; Putting the content of $eax on the stack 
	// MOV	 DWORD PTR [esp], 0x80c5348     ; Putting the content of 0x80c5348 on the stack. 0x80c5348 contains '/bin/sh'.
	// CALL  0x8048f80 <execv>
	
	execv("/bin/sh", &pointer);
    }
    else  
    {                                
 	// MOV    eax,0x80c5350      ; Contains 'No !\n'
 	// MOV    DWORD PTR [esp+0xc],edx
        // MOV    DWORD PTR [esp+0x8],0x5
 	// MOV    DWORD PTR [esp+0x4],0x1
 	// MOV    DWORD PTR [esp],eax
 	// CALL   0x804a230 <fwrite>
        fwrite("No !\n", 1, 5, stderr);
    }
    return 0;
}
